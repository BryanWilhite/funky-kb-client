{
  "Document": {
    "DocumentId": 2076071804,
    "Title": "JavaServer Faces in Action Notes: Chapter 2; JSF Fundamentals; 2.1.6 Events and listeners",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2007-03-14T17:35:24",
    "ModificationDate": "2007-03-14T17:35:24",
    "TemplateId": null,
    "SegmentId": 69,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "2.1.6 Events and listeners\n\n\"JSF leverages JavaBeans to handle events with event objects and listeners, just like Swing. Any component may fire zero or more events, and developers (or components themselves) can register zero or more listeners to handle those events.\" Encouraging developers to think in terms of events is meant to free them from thinking about HTTP requests and responses.\n\n\"There are four standard events: value-change events, action events, data model events, and phase events.\" Phase events \"execute while JSF processes an HTTP request.\"\n\n\nValue-change events\n\nA sample value-change event declaration:\n\n    valueChangeListener=\"#{myForm.processValueChanged}\"\n\nThe corresponding, backing-bean stub:\n\n    public void processValueChanged(ValueChangeEvent event)\n    {\n        //...\n    }\n\n\nAction events\n\nComponents that generate action events are also called \"action sources.\" Two types of \"action listeners\" handle action events: \"those that affect navigation [wired to an action method], and those that don't [wired to an action listener method].\" Those that don't cause the page firing the event to be redisplayed.\n\n\"Technically all navigation is handled by a single action listener. This listener automatically handles any action events fired by the component, so it doesn't need to be registered manually. By default, this action listener delegates all of its work to action methods in your backing beans... most of your application logic will be located in these methods.\"\n\nA sample action event declaration:\n\n    action=\"#{loginForm.login}\"\n\nThe corresponding, backing-bean method:\n\n    public class LoginForm\n    {\n        public String login() { return \"success\"; }\n    }\n\nThe login() method returns a \"dynamic outcome\" a \"static outcome\" (with the same affect as the above looks like this:\n\n    action=\"success\"\n\nA sample action listener event declaration:\n\n    actionListener=\"#{myForm.doIt}\"\n\nThe corresponding, backing-bean method stub:\n\n    public void doIt(ActionEvent event)\n    {\n        //...\n    }\n\n\"Usually, you use action listener methods for changes that affect the current view.\" Note that action listener methods do not return values (but accept one parameter of type ActionEvent), while action methods take no parameters but require a String return value.\n\n\nData model events\n\n\"Data model events are a little different than the other events because they're not actually fired by the UI component... you can't register a listener on the component itself in JSP. You have to register it in Java code instead...\" You must implement an interface to define a data model event.\n\n\"Since data model events are fired so many times, they're normally used when developing a data-driven component, rather than during application development.\" It seems like the author is saying that data model events are used at design time.\n\n\nPhase events\n\n\"Whenever a JSF application receives a request, it goes through a six-step process called the Request Processing Lifecycle\": (i) getting the view based on the request, (ii) obtaining component values from request parameters, (iii) validating input, (iv) updating backing beans and model objects, (v) invoking action listeners and (vi) returning a response.\n\nEach of these six \"phases\" has two associated phase events. \"Phase events are generated by JSF itself rather than by UI components, and require that you implement a Java interface to register event listeners. They're normally used internally by the JSF implementation...\"\n",
  "Tag": "kb2076071804"
}