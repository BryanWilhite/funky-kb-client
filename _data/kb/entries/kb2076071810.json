{
  "Document": {
    "DocumentId": 2076071810,
    "Title": "Hibernate in Action Notes: Chapter 1; Understanding object/relational persistence; 1.3 Persistence layers and alternatives",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2007-04-09T17:37:08",
    "ModificationDate": "2007-04-09T17:37:08",
    "TemplateId": null,
    "SegmentId": 69,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "1.3 Persistence layers and alternatives\n\n\"A layered architecture defines interfaces between code that implements the various concerns, allowing a change to the way one concern is implemented without significant disruption to code in the other layers.\"\n\n\"Layers communicate top to bottom. A layer is dependent only on the layer\ndirectly below it... Each layer is unaware of any other layers except for the layer just below it.\"\n\n\"Different applications group concerns differently, so they define different layers. A typical, proven, high-level application architecture uses three layers, one each for presentation, business logic, and persistence...\" In addition to these layers, there are the Database and Helper/Utility classes.\n\nAbout four implementation options are listed for the persistence layer: Hand-coding a persistence layer with SQL/JDBC, serialization, EJB entity beans, object-oriented database systems and a snub for XML persistence.",
  "Tag": "kb2076071810"
}