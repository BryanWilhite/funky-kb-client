{
  "Document": {
    "DocumentId": 2076072226,
    "Title": "Java SE: “Sorting Strings” by John Zukowski",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2009-08-27T21:24:44",
    "ModificationDate": "2009-08-27T21:24:44",
    "TemplateId": null,
    "SegmentId": 69,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Sorting strings with the Java platform can be thought of as an easy task, but there is much more thought that should be put into it when developing programs for an international market. If you're stuck in the English-only mindset, and you think your program works fine because it shows that the string tomorrow comes after today, you might think all is great. But, once you have a Spanish user who wants mañana to be sorted properly, if all you use is the default compare() method of String for sorting, the ñ character will come after the z character and will not be the natural Spanish ordering, between the n character and o character. That's where the Collator class of the java.text package comes into play.\n\nImagine a list of words\n\n    * first\n    * mañana\n    * man\n    * many\n    * maxi\n    * next \n\nUsing the default sorting mechanism of String, its compare() method, this will result in a sorted list of:\n\n    * first\n    * man\n    * many\n    * maxi\n    * mañana\n    * next \n\nHere, mañana comes between maxi and next. In the Spanish world, what should happen is mañana should come between many and maxi as the ñ character (pronounced eñe) comes after the n in that alphabet. While you could write your own custom sort routine to handle the ñ, what happens to your program when a German user comes around and wants to use their own diacritical marks, or what about just a list of design patterns with façade? Do you want façade before or after factory? (Essentially treating the ç with the little cedilla hook the same as c or different.)\n\nThat's where the Collator class comes in handy. The Collator class takes into account language-sensitive sorting issues and doesn't just try to sort words based upon their ASCII/Unicode character values. Using Collator requires understanding one additional property before you can fully utilize its features, and that is something called strength. The strength setting of the Collator determines how strong (or weak) a match is used for ordering. There are four possible values for the property: PRIMARY, SECONDARY, TERTIARY, and IDENTICAL. What actually happens with each is dependent on the locale. Typically what happens is as follows. In reverse order, IDENTICAL strength means just that, the characters must be identical for them to be treated the same. TERTIARY typically is for ignoring case differences. SECONDARY is for ignoring diacritical marks, like n vs. ñ. PRIMARY is like IDENTICAL for base letter differences, but has some differences when handling control characters and accents. See the Collator javadoc for more information on these differences and decomposition mode rules.\n\nTo work with Collator, you need to start by getting one. You can either call getInstance() to get one for the default locale, or pass the specific Locale to the getInstance() method to get a locale for the one provided. For instance, to get one for the Spanish language, you would create a Spanish Locale with new Locale(\"es\") and then pass that into getInstance():\n\n Collator esCollator =\n   Collator.getInstance(new Locale(\"es\"));\n\nAssuming the default Collator strength for the locale is sufficient, which happens to be SECONDARY for Spanish, you would then pass the Collator like any Comparator into the sort() routine of Collections to get your sorted List:\n\n Collections.sort(list, esCollator);\n\nWorking with the earlier list, that now gives you a proper sorting with the Spanish alphabet:\n\n    * first\n    * man\n    * many\n    * mañana\n    * maxi\n    * next \n\nHad you instead used the US Locale for the Collator, mañana would appear between man and many since the ñ is not its own letter.\n\nHere's a quick example that shows off the differences.\n\nimport java.awt.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.List; // Explicit import required\nimport javax.swing.*;\n\npublic class Sort {\n public static void main(String args[]) {\n   Runnable runner = new Runnable() {\n     public void run() {\n       String words[] = {\"first\", \"mañana\", \"man\",\n                         \"many\", \"maxi\", \"next\"};\n       List list = Arrays.asList(words);\n       JFrame frame = new JFrame(\"Sorting\");\n       frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);\n       Box box = Box.createVerticalBox();\n       frame.setContentPane(box);\n       JLabel label = new JLabel(\"Word List:\");\n       box.add(label);\n       JTextArea textArea = new JTextArea( list.toString());\n       box.add(textArea);\n       Collections.sort(list);\n       label = new JLabel(\"Sorted Word List:\");\n       box.add(label);\n       textArea = new JTextArea(list.toString ());\n       box.add(textArea);\n       Collator esCollator = Collator.getInstance(new Locale(\"es\"));\n       Collections.sort(list, esCollator);\n       label = new JLabel(\"Collated Word List:\");\n       box.add(label);\n       textArea = new JTextArea(list.toString());\n       box.add(textArea);\n       frame.setSize(400, 200);\n       frame.setVisible(true);\n     }\n   };\n   EventQueue.invokeLater (runner);\n }\n}\n\n[http://blogs.sun.com/CoreJavaTechTips/entry/sorting_strings]",
  "Tag": "kb2076072226"
}