{
  "Document": {
    "DocumentId": 2076072278,
    "Title": "C# Code: “Performance and Multiple Assigment in C#”; David Connell",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2009-09-26T22:34:25",
    "ModificationDate": "2009-09-26T22:34:25",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "I was recently thinking if I really liked to use the Multiple assignment in 'C#' or if it was less readable. In 'C' this syntax was popular as it tended to lead to smaller and quicker code.\n\nSo I wondered in C# if the multiple assigment also lead to quicker code. So I quickly wrote some test cases to see which style of code was quicker to execute...\n\nI took a rather simplistic model to profile, in order to make the tests more repeatable and easy to follow.\n\nThe .NET code followed the followed the structure:\n\n[STAThread] static void Main(string[] args) \n            int Count1;\n            int  Count2;\n            int  Count3;\n            int  Count4;\n            int  Count5;\n            int  Count6;\n            int  Count7;\n            int  Count8;\n\n            Count1 =\n            Count2 =\n            Count3 =\n            Count4 =\n            Count5 =\n            Count6 =\n            Count7 =\n            Count8 = 100;\n            \n\t\t\t\n            DateTime time = DateTime.Now;\n            for (long i = 0; i < 1000000000; i++)\n            {\n                int  x = 100;\n                Count1 = \n                Count2 = \n                Count3 = \n                Count4 = \n                Count5 = \n                Count6 = \n                Count7 = \n                Count8 = x;\n            }\n\n            TimeSpan span = DateTime.Now - time;\n            Console.WriteLine(\"Time taken{0}\", span.TotalMilliseconds / 1000.0);\n} \n\nTest \t.NET 1.1\nDebug Mode \t.NET 1.1\nunder the debugger \t.NET 1.1\nRelease Mode\nCount1=x;Count2=x;..... \t7 \t7 \t4.5\nCount1=Count2=Count3 ...=x; \t9.5 \t9.5 \t4.5\n  \t\nResults are in seconds\n\nI did test out directly setting the values eg Count1=100; Count2=100; etc as well as using strings. These variations appeared to give similar results. I carried out the same expermiment under .NET 2 and the results were similar just slightly slower in debug mode.\n\nThe machine that carried out the tests was an Intel 3.4Ghz P4 running XP SP2 with 1GB RAM.\n\nI guess as ever this proves that it is more important to write readable code that requires the minimum of maintanance, rather than trying to outwit the compiler/CLR.\n\nSo would I use the multiple assignment? Probably not as much as I used to, but when it leads to easier to read code then yes. \n\n[http://www.simple-talk.com/community/blogs/\n    davidc/archive/2006/01/25/183.aspx]",
  "Tag": "kb2076072278"
}