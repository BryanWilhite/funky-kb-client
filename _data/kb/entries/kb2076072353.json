{
  "Document": {
    "DocumentId": 2076072353,
    "Title": "Silverlight 2.x: “Silverlight Tips, Tricks, and Best Practices”",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2010-03-19T17:52:54",
    "ModificationDate": "2010-03-19T17:52:54",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Use CreateFromXaml to Reduce XAML Size\n\nAnother takeaway from the sample application is how it uses CreateFromXaml to create XAML Image objects dynamically rather than cluttering the XAML file with scores of nearly identical Image declarations. The XAML file you see in Figure 4, Scene.xaml, is nearly empty. It declares a couple of Canvases and Rectangles, a Storyboard, and a ScaleTransform, but it doesn't declare a single Image object. Instead, a for loop in Default.html.js creates 105 Image objects—one per image in the animation—and initializes them with image bits from the downloader (see Figure 5).\n\n…\n\nUse Storyboards for Manual Animations\n\nOne of the coolest features of Silverlight is its rich support for animations. You can make objects fade in and out, zoom across the page, and pop in and out of view with a few lines of XAML. But you can't animate just anything, at least not declaratively. You can easily animate numeric properties, Color properties, and Point properties. But if you want to, say, animate an image by varying its Source property over time (swapping one image for another on each tick), you'll have to write some code, and the way you structure that code will affect the quality of the animation.\n\nSilverlight 1.0 lacks an explicit timer object, and window.setTimeout is less than ideal for animations. That's why savvy Silverlight developers use Storyboard objects when they need programmable timers.\n\n[http://msdn.microsoft.com/en-us/magazine/cc164249.aspx]",
  "Tag": "kb2076072353"
}