{
  "Document": {
    "DocumentId": 2076071808,
    "Title": "Hibernate in Action Notes: Chapter 1; Understanding object/relational persistence; 1.1 What is persistence?",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2007-04-08T19:12:54",
    "ModificationDate": "2007-04-08T19:12:54",
    "TemplateId": null,
    "SegmentId": 69,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "1.1 What is persistence?\n\n\"To use Hibernate effectively, a solid understanding of the relational model and SQL is a prerequisite.\" Here is a list of SQL terms:\n\n* Data Definition Language (DDL): CREATE, ALTER\n* Data Manipulation Language (DML): INSERT, UPDATE, DELETE\n\n\"There are many reasons why SQL databases dominate the computing industry. Relational database management systems are the only proven data management technology and are almost always a requirement in any Java project.\"\n\n\"However, for the last 15 years, developers have spoken of a paradigm mismatch.\"\n\n\"Almost all Java applications contain a mix of persistent and transient objects; hence we need a subsystem that manages our persistent data.\" This \"subsystem\" requires a \"domain model.\"\n\n\"An application with a domain model doesn't work directly with the tabular representation of the business entities; the application has its own, object oriented model of the business entities.\"",
  "Tag": "kb2076071808"
}