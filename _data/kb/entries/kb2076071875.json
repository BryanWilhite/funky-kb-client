{
  "Document": {
    "DocumentId": 2076071875,
    "Title": "C# 2.0 Code: Using a Generic List<T> to Build an Array from a Generic Dictionary<String, Object>",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2007-08-29T12:37:28",
    "ModificationDate": "2007-08-29T12:37:28",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "One of the many, many ways to use Generics in C# 2.0 is to build a strongly-typed Array from a Generic Dictionary<String, Object>. This form of Dictionary is useful for generating parameters for data commands. The challenge is to get this general-purpose collection of parameters into a “real” array of parameters that can be used by the .NET Framework:\n\n    List<IDataParameter> list =\n        new List<IDataParameter>( parameterCollection.Count );\n    foreach ( KeyValuePair<String, Object> kvp in parameterCollection )\n    {\n        list.Add( GetParameter( dbmsCommand, kvp.Key, kvp.Value ) );\n    }\n    return list.ToArray();\n\nThe GetParameter() member generates an object that implements IDataParameter.",
  "Tag": "kb2076071875"
}