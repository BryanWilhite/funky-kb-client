{
  "Document": {
    "DocumentId": 2076072201,
    "Title": "“yield (C# Reference)”; MSDN",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2009-08-17T22:03:18",
    "ModificationDate": "2009-08-17T22:03:18",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Used in an  iterator block to provide a value to the enumerator object or to signal the end of iteration. It takes one of the following forms:\n\n    yield return <expression>;\n\n    yield break;\n\nThe yield statement can only appear inside an iterator block, which might be used as a body of a method, operator, or accessor. The body of such methods, operators, or accessors is controlled by the following restrictions:\n\n    * Unsafe blocks are not allowed.\n    * Parameters to the method, operator, or accessor cannot be ref or out.\n\nA yield statement cannot appear in an anonymous method.\n\n…\n\nStarting from .NET 2.0 you also use System.Collections.Generic.IEnumerable<T> as return type of iterator block.\n\n\nA yield statement can not be used in body of finally block.\n\n\nUsing  try/finally blocks with yield return statement inside them is unsafe if iteration performed using MoveNext/Current methods. Execution of statements inside finally block is not guaranteed. They will be executed only after all values before block will be iterated and next one requested OR IDisposable.Dispose method called on IEnumerator. Finally statements will not be executed during garbage collection as compiler generated iterator class have no finalizer. Using with foreach is safe as compiler will generate call to Dispose.\n\n[http://msdn.microsoft.com/en-us/library/9k7k7cf0(VS.80).aspx]",
  "Tag": "kb2076072201"
}