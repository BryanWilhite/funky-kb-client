{
  "Document": {
    "DocumentId": 2076071696,
    "Title": "MCAD/MCSD Notes: Chapter 7, Lesson 5; Consuming XML Web Services",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2005-07-29T15:58:46.757",
    "ModificationDate": "2005-07-29T15:58:46.757",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Lesson 5: Consuming XML Web Services\n\nThis lesson is a very brief overview of Web services support in the .NET Framework. The concept of the \"Microsoft WebService Behavior\" is introduced here.\n\n* \"XML Web services are business logic components that can be accessed over the Internet.\"\n\nThe above quote is listed here for 'posterity' as the use of the term \"business logic\" is by now threadbare!\n\n* \"XML Web services are made public over the Web using a Universal Description, Discovery, and Integration (UDDI) registry. Currently, Microsoft and IBM manage two UDDI nodes available for locating XML Web services.\"\n\nAs of this writing, IBM, Microsoft, NTT Communications, and SAP jointly own the registry. For more information, see:\n\n    http://uddi.org/find.html\n\n* \"Using an XML Web service is much the same as using a .NET or COM component: you establish a reference to the class, create an instance of an object from the class, and then use the object's properties and methods within your code.\"\n\nThe opinion here is that this a true Microsoft innovation. Adding a Web Reference in Visual Studio .NET, automatically creates WSDL (Web Services Description Language) for SOAP calls through a proxy class. For a Microsoft-centric understanding of WDSL, see \"Understanding WSDL\" at:\n\n    http://msdn.microsoft.com/library/en-us/dnwebsrv/html/understandWSDL.asp\n\nThe following is a SOAP call to Amazon.com:\n\n    com.amazon.soap.AmazonSearchService ws =\n        new com.amazon.soap.AmazonSearchService();\n    com.amazon.soap.AsinRequest req =\n        new MCSDWebAppsCS.com.amazon.soap.AsinRequest();\n    com.amazon.soap.ProductInfo info =\n        new MCSDWebAppsCS.com.amazon.soap.ProductInfo();\n\n    req.asin = \"0782113273\";\n    req.devtag = \"XXXXXXXXXXXXXX\";\n    req.tag = \"thekintespacec00A\";\n    req.type = \"lite\";\n\n    info = ws.AsinSearchRequest(req);\n    com.amazon.soap.Details product = info.Details[0];\n    body.InnerHtml = String.Format(\"Product Name: {0}\",product.ProductName);\n\n* \"In some cases it makes more sense to call an XML Web service from client-side scripts than from server code.\"\n\nThe Microsoft WebService Behavior is one asynchronous solition to the problem of waiting on Web services. The sample code for this lesson includes a \"WebService Behavior\" HTC file that has over 2000 lines of code! For more information, see \"Using the WebService Behavior\" at:\n\n   http://msdn.microsoft.com/workshop/author/webservice/using.asp\n",
  "Tag": "kb2076071696"
}