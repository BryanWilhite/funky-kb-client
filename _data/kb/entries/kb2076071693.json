{
  "Document": {
    "DocumentId": 2076071693,
    "Title": "MCAD/MCSD Notes: Chapter 7, Lesson 3; Interoperating with COM",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2005-07-29T13:14:34.07",
    "ModificationDate": "2005-07-29T13:14:34.07",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Lesson 3: Interoperating with COM\n\nThe purpose of this lesson is to expand upon the backwards-compatibility feature set of .NET to include COM \"interop.\" This lesson makes explicit the relationship .NET has with legacy technologies like VB6. It may help to mention that COM stands for component object model, where the word \"component\" often indicates the physical boundary in which properties and procedures reside (effectively, this means a .DLL file).\n\n* \"When you add a reference to a COM object, Visual Studio automatically generates an interop assembly for the object and places it in the project's /bin folder.\"\n\nThis assembly can be viewed with Intermediate Language Disassembler (ILDASM.exe). For more information, see \"VS.NET Tools: Intermediate Language Disassembler(ILDASM)\" at:\n\n    http://www.c-sharpcorner.com/vsnet/IldasmTool.asp\n\n* \"Visual Basic 6.0 allowed you create COM properties (Property Let procedures) that were assigned by reference. Visual C# won't recognize those properties.\"\n\nThis looks like yet another very subtle difference between VB.NET and C#.\n\n* \"Visual Studio can automatically generate type library information and register a .NET class library assembly for use from COM. These automatic tools do not work for ASP.NET Web applications.\"\n\nOne could argue that ASP.NET applications are already interoperable with COM by default since Internet Information Server must still have COM interfaces at least up to version 6.0.\n\n* \"The ComVisible attribute allows you to select which public .NET classes and members are included in the generated type library.\"\n\nOne design pattern shown in the lesson sets the entire assembly to 'hidden' with:\n\n    [assembly: ComVisible(false)]\n\nso that members can \"opt in\" to COM visibility.\n\n* \".NET handles errors through exception classes. COM handles errors through 32-bit data types called HRESULTs.\"\n\nManaged exceptions under COM are mapped to the appropriate HRESULT and vice versa.\n\n* \"COM requires objects to be created before use, so it does not support .NET Shared/static members.\"\n\nThis limitation stands out foremost for managed code running under COM among the lack of support for construtors with parameters and \"shadow\" members not being callable.",
  "Tag": "kb2076071693"
}