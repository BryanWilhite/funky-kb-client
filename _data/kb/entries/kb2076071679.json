{
  "Document": {
    "DocumentId": 2076071679,
    "Title": "MCAD/MCSD Notes: Chapter 6, Lesson 1; Using Exception Handling",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2005-06-08T16:19:10.21",
    "ModificationDate": "2005-06-08T16:19:10.21",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Lesson 1: Using Exception Handling\n\nThe purpose of this lesson is to introduce \"error\" or \"exception\" handling in ASP.NET.\n\n* \"Errors that are not dealt with in code are called unhandled exceptions... There are three approaches to handling exceptions in a Web application...\"\n\nThe three are: structured exception handling (SEH), error event procedures defined in the System.Web.UI.Page class and custom error pages declared in the @Page directive, its errorPage attribute.\n\n* \"You can combine approaches to effectively handle all possible exceptions within your application...\"\n\n* \"Use exception handling structures to enclose statements that access nonmemory resources, such as files and database connections.\"\n\nThe use of the term \"nonmemory resources\" sounds strange. What is more perhaps is to say that try/catch/finally blocks are useful when crossing \"boundaries\" or \"layers\" in an application.\n\n* \"Use the Finally/finally block to include statements that are always executed before leaving the exception-handling structure.\"\n\nThe classic example for the above is closing a database connection when trying to connect to an external data source (and calling its Dispose() method).\n\n* \"The Microsoft .NET Framework includes specific exception types with the individual .NET Framework classes. This means that there is no single, comprehensive list of exception types in the .NET documentation. Instead, you must use the Visual Studio .NET Exceptions dialog box to view specific exception types...\"\n\n* \"...you use the Throw/throw keyword to cause specific exceptions to occur.\"\n\nThe suggestion in the lesson is that exceptions can be used a primary form of communication instead of suggesting it for a secondary (or tertiary) form because of performance reasons. To the contrary, the lesson introduces the ApplicationException class to encourage us to define new exceptions based on this class.\n\n* \"The ApplicationException class provides the same features as the standard Exception class. It simply provides a way to differentiate between those exceptions defined in the .NET Framework and those defined in your application.\"\n\n* \"When an unhandled exception occurs in a Web application, ASP.NET fires the error events...\"\n\nThese events are Page_Error, Global_Error and Application_Error. In the reality of Visual Studio .NET auto-generated code the Global_Error event procedure is not used.\n\n* \"Error events let you handle exceptions for an entire object in a single, centralized location---the error event procedure... When handling exceptions in error events, use the Server object to get information about the exception that occurred.\"\n\nThe Server.GetLastError() and Server.ClearError() methods gets \"the information\" and clears the error, respectively. The code samples suggest that a useful design pattern is to get the last error, store it in a Session variable, clear the error and use Server.Transfer() to re-load the page throwing the error.",
  "Tag": "kb2076071679"
}