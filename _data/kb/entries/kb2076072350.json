{
  "Document": {
    "DocumentId": 2076072350,
    "Title": "LINQ to XML: “XML to IEnumerable<T>”; Andrew Hare; Using a Generic Method with an Interface Constraint",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2010-03-18T21:21:12",
    "ModificationDate": "2010-03-18T21:21:12",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Given the following types:\n\npublic interface IFruit\n{\n    String name { get; set; }\n    Int32 id { get; set; }\n}\n\npublic class Fruit : IFruit\n{\n    public String name { get; set; }\n    public Int32 id { get; set; }\n}\n\nI think that you could do something like this:\n\n    static IEnumerable<T> GetSomeFruit<T>(String xml)\n        where T : IFruit, new()\n    {\n        return XElement.Parse(xml)\n                .Elements(\"fruit\")\n                .Select(f => new T {\n                        name = f.Element(\"name\").Value,\n                        id = Int32.Parse(f.Element(\"id\").Value)\n                });\n    }\n\nWhich you would call like this:\n\nIEnumerable<Fruit> fruit = GetSomeFruit<Fruit>(yourXml);\n\n[http://stackoverflow.com/questions/1460567/xml-to-ienumerablet]",
  "Tag": "kb2076072350"
}