{
  "Document": {
    "DocumentId": -443345831,
    "Title": "Book: Access 97 Power Programming; Chapter 3 Highlights (1/3): \"Working with Application Collections And Data Access Objects\"",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "1998-10-01T13:42:08",
    "ModificationDate": "1998-10-01T13:42:08",
    "TemplateId": null,
    "SegmentId": 64,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Declaring a Collection Variable\n\nA user-defined collection is a new instance of a collection object. Its \"instancing\" requires the New keyword. The abbreviated way of declaring a new collection object has the form:\n\n    Dim <my collection object variable> as New Collection\n\ne.g.\n\n    Dim colExample as New Collection\n\nThis form is useful at procedure level in the code module. However the non-abbreviated way of delcaring any new object uses two statements instead of one. The first statement is in the declarations section of the module:\n\n    Public p_colExample as Collection\n\nThis object variable is now avaible for use and re-use throughout the application. At the procedure level, we can Set this variable equal to a New Collection:\n\n    Set p_colExample = New Collection\n\nAlthough this appears redundant, it is now possible to quickly destroy the contents of a collection with the code:\n\n   Set p_colExample = Nothing\n\nNow this collection object variable can be reused in other modules.\n\n\nIndex Numbers in Collections\n\nIntrinsic Access collections are 0-based while user-defined collection indices are 1-based.\n\n\nFor a detailed discussion of how collections differ from arrays, please see \"Creating Custom Collections\" (pg. 67) and \"Comparing Custom Collections to Arrays\" (pg. 70).\n\n\nThe Access Object Model\n\nThe Access Object Model is a containment hierarchy that begins with the Application object. Please see \"Accessing the Access Object Model\" (pg. 73). Here are some noted methods of the Application object:\n\nApplication. Echo\nApplication.GetOption\nApplication.SetOption\n\n\nThe Screen Object\n\nThe Screen object is of the Application object. Here are some noted properties of the Screen object:\n\nScreen. ActiveForm\nScreen.ActiveReport\nScreen.ActiveControl\nScreen.PreviousControl\n\nNote that there is no need to specify the Application keyword in code within Access.",
  "Tag": "kb-443345831"
}