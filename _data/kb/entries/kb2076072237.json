{
  "Document": {
    "DocumentId": 2076072237,
    "Title": "“Design Patterns”; dofactory.com",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2009-08-29T20:58:28",
    "ModificationDate": "2009-08-29T20:58:28",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": " Design patterns are recurring solutions to software design problems you find again and again in real-world application development. Patterns are about design and interaction of objects, as well as providing a communication platform concerning elegant, reusable solutions to commonly encountered programming challenges.\n\nThe Gang of Four (GoF) patterns are generally considered the foundation for all other patterns. They are categorized in three groups: Creational, Structural, and Behavioral. Here you will find information on these important patterns.\n\nTo give you a head start, the C# source code is provided in 2 forms: 'structural' and 'real-world'. Structural code uses type names as defined in the pattern definition and UML diagrams. Real-world code provides real-world programming situations where you may use these patterns.\n\nA third form, '.NET optimized' demonstrates design patterns that exploit built-in .NET 2.0, 3.0, and 3.5 features, such as, generics, attributes, delegates, object and collection initializers, automatic properties, and reflection. These and much more are available in our Design Pattern Framework 3.5TM. See our Singleton page for a .NET 3.5 Optimized code sample.\n\n  Creational Patterns\n  Abstract Factory \t  Creates an instance of several families of classes\n  Builder \t  Separates object construction from its representation\n  Factory Method \t  Creates an instance of several derived classes\n  Prototype \t  A fully initialized instance to be copied or cloned\n  Singleton \t  A class of which only a single instance can exist\n\n  Structural Patterns\n  Adapter \t  Match interfaces of different classes\n  Bridge \t  Separates an object’s interface from its implementation\n  Composite \t  A tree structure of simple and composite objects\n  Decorator \t  Add responsibilities to objects dynamically\n  Facade \t  A single class that represents an entire subsystem\n  Flyweight \t  A fine-grained instance used for efficient sharing\n  Proxy \t  An object representing another object\n\n  Behavioral Patterns\n  Chain of Resp. \t  A way of passing a request between a chain of objects\n  Command \t  Encapsulate a command request as an object\n  Interpreter \t  A way to include language elements in a program\n  Iterator \t  Sequentially access the elements of a collection\n  Mediator \t  Defines simplified communication between classes\n  Memento \t  Capture and restore an object's internal state\n  Observer \t  A way of notifying change to a number of classes\n  State \t  Alter an object's behavior when its state changes\n  Strategy \t  Encapsulates an algorithm inside a class\n  Template Method \t  Defer the exact steps of an algorithm to a subclass\n  Visitor \t  Defines a new operation to a class without change\n\n[http://www.dofactory.com/Patterns/Patterns.aspx]",
  "Tag": "kb2076072237"
}