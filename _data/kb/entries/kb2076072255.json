{
  "Document": {
    "DocumentId": 2076072255,
    "Title": "C# Code:  ToType<T>() Extension Method; “how to handle conversions from an anonymous type to a specific type by using .NET 3.5 extensions”; Ed Guzman; CodeProject.com",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2009-09-17T20:18:30",
    "ModificationDate": "2009-09-17T20:18:30",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "public static object ToType<T>(this object obj, T type)\n{\n\n    //create instance of T type object:\n    var tmp = Activator.CreateInstance(Type.GetType(type.ToString())); \n\n    //loop through the properties of the object you want to covert:          \n    foreach (PropertyInfo pi in obj.GetType().GetProperties()\n    {\n      try \n      {   \n\n        //get the value of property and try \n        //to assign it to the property of T type object:\n        tmp.GetType().GetProperty(pi.Name).SetValue(tmp, \n                                  pi.GetValue(obj, null), null)\n      }\n      catch { }\n     }  \n\n   //return the T type object:         \n   return tmp; \n}\n\n[http://www.codeproject.com/KB/linq/AnonymousTypeTransform.aspx]",
  "Tag": "kb2076072255"
}