{
  "Document": {
    "DocumentId": -24999808,
    "Title": "Code: Selected API Calls.",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "1998-02-11T13:38:22",
    "ModificationDate": "1998-02-11T13:38:22",
    "TemplateId": null,
    "SegmentId": 63,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "'------------------------------------------------------------------------\n'\n' MODULE\n'\n'   Windows API Utilities\n'\n' PURPOSE\n'\n'   Provides routines for manipulating Microsoft Access forms and\n'   windows through the Window API.\n'\n' NOTES\n'\n'   Most of the symbols in this module are prefixed with 'WU_',\n'   in an attempt to avoid naming conflicts with library databases.\n'\n'------------------------------------------------------------------------\nOption Compare Text     ' Non case sensitive compares\n\n'\n' Type WU_RECT.\n'\nType WU_RECT\n    x1 As Integer\n    y1 As Integer\n    x2 As Integer\n    y2 As Integer\nEnd Type\n\n\n'\n' Windows API Declarations.\n'\nDeclare Function wu_CheckMenuItem Lib \"User\" Alias \"CheckMenuItem\" (ByVal hMenu%, ByVal idEnableItem%, ByVal uEnable%) As Integer\nDeclare Sub wu_DrawMenuBar Lib \"User\" Alias \"DrawMenuBar\" (ByVal hwnd%)\nDeclare Function wu_EnableMenuItem Lib \"User\" Alias \"EnableMenuItem\" (ByVal hMenu%, ByVal idEnableItem%, ByVal uEnable%) As Integer\nDeclare Function wu_GetActiveWindow Lib \"User\" Alias \"GetActiveWindow\" () As Integer\nDeclare Function wu_GetClassName Lib \"User\" Alias \"GetClassName\" (ByVal hwin%, ByVal stBuf$, ByVal cch%) As Integer\nDeclare Function wu_GetClientRect Lib \"User\" Alias \"GetClientRect\" (ByVal hwin%, rectangle As WU_RECT) As Integer\nDeclare Function wu_GetDC Lib \"User\" Alias \"GetDC\" (ByVal hw%) As Integer\nDeclare Function wu_GetDesktopWindow Lib \"User\" Alias \"GetDesktopWindow\" () As Integer\nDeclare Function wu_GetDeviceCaps Lib \"GDI\" Alias \"GetDeviceCaps\" (ByVal hDC%, ByVal iCapability%) As Integer\nDeclare Function wu_GetFocus Lib \"User\" Alias \"GetFocus\" () As Integer\nDeclare Function wu_GetMenu Lib \"User\" Alias \"GetMenu\" (ByVal hwnd%) As Integer\nDeclare Function wu_GetMenuState Lib \"User\" Alias \"GetMenuState\" (ByVal hMenu%, ByVal idItem%, ByVal fuFlags%) As Integer\nDeclare Function wu_GetParent Lib \"User\" Alias \"GetParent\" (ByVal hwin%) As Integer\nDeclare Function wu_GetSubMenu Lib \"User\" Alias \"GetSubMenu\" (ByVal hMenu%, ByVal nPos%) As Integer\nDeclare Function wu_GetWindow Lib \"User\" Alias \"GetWindow\" (ByVal hw%, ByVal nRelationship%) As Integer\nDeclare Function wu_GetWindowRect Lib \"User\" Alias \"GetWindowRect\" (ByVal hwin%, rectangle As WU_RECT) As Integer\nDeclare Function wu_IsZoomed Lib \"User\" Alias \"IsZoomed\" (ByVal hwnd%) As Integer\nDeclare Function wu_MoveWindow Lib \"User\" Alias \"MoveWindow\" (ByVal hwin%, ByVal x%, ByVal y%, ByVal dx%, ByVal dy%, ByVal fRepaint%) As Integer\nDeclare Function wu_SetFocus Lib \"User\" Alias \"SetFocus\" (ByVal hwin%) As Integer\nDeclare Function wu_ShowWindow Lib \"User\" Alias \"ShowWindow\" (ByVal hwnd%, ByVal i%) As Integer\n\n'\n' Constants used in the functions above.\n'\nConst WU_SW_RESTORE = 9\nConst WU_GW_HWNDFIRST = 0\nConst WU_GW_HWNDLAST = 1\nConst WU_GW_HWNDNEXT = 2\nConst WU_GW_HWNDPREV = 3\nConst WU_GW_OWNER = 4\nConst WU_GW_CHILD = 5\nConst WU_LOGPIXELSX = 88\nConst WU_LOGPIXELSY = 90\n\nConst WU_MF_BYCOMMAND = &H0\nConst WU_MF_BYPOSITION = &H400\nConst WU_MF_ENABLED = &H0\nConst WU_MF_GRAYED = &H1\nConst WU_MF_DISABLED = &H2\nConst WU_MF_MENUBREAK = &H40\nConst WU_MF_CHECKED = &H8\nConst WU_MF_UNCHECKED = &H0\n\n'\n' Microsoft Access Window Classes.\n'\nGlobal Const WU_WC_ACCESS = \"OMain\"\nGlobal Const WU_WC_ACCESSDBC = \"ODb\"\nGlobal Const WU_WC_ACCESSTBL = \"OTable\"\nGlobal Const WU_WC_ACCESSQRY = \"OQRY\"\nGlobal Const WU_WC_ACCESSFRM = \"OForm\"\nGlobal Const WU_WC_ACCESSRPT = \"OReport\"\nGlobal Const WU_WC_ACCESSMAC = \"OScript\"\nGlobal Const WU_WC_ACCESSMOD = \"OModule\"\nGlobal Const WU_WC_ACCESSFRMPOPUP = \"OFormPopup\"\nGlobal Const WU_WC_ACCESSTOOLBAR = \"OToolbar\"\nGlobal Const WU_WC_ACCESSMDICLIENT = \"MDIClient\"\n\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_ActiveFormName\n'\n' PURPOSE     : Returns the active form's name.\n'\n' NOTES       : If the form is loaded but not yet visible (e.g. it's\n'               in the OnOpen or initial OnCurrent event, this routine\n'               will return the null string.  This is a handy way of\n'               determining if you're in the initialization stage of\n'               a form (like the initial OnCurrent).\n'------------------------------------------------------------------------\nFunction wu_ActiveFormName () As String\n    On Error Resume Next\n\n    stName$ = Screen.ActiveForm.FormName\n    If (Err = 0) Then\n        wu_ActiveFormName = stName$\n    Else\n        wu_ActiveFormName = \"\"\n    End If\n\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_CenterDoc\n'\n' PURPOSE     : Centers a Microsoft Access form.\n'------------------------------------------------------------------------\nFunction wu_CenterDoc (hwnd%) As Integer\n    Dim r As WU_RECT, rDesk As WU_RECT\n    Dim dx As Integer, dy As Integer, dxDesk As Integer, dyDesk As Integer\n\n    If (hwnd% = 0) Then hwnd = wu_GetCurrentDoc(True)\n    hwndDesk% = wu_GetParent(hwnd%)\n    stClass$ = wu_StWindowClass(hwnd%)\n\n    ' Special case for forms: Move them to 0,0 and do a SizeToFitForm\n\n    If (stClass$ = WU_WC_ACCESSFRM) Then\n        DoCmd MoveSize 0, 0\n        On Error Resume Next\n        DoCmd DoMenuItem A_FORMBAR, 4, 5\n        On Error GoTo 0\n    End If\n\n    ' If this is a popup, use the WindowRect of the desktop.  Otherwise,\n    ' use the client rect.\n\n    f% = wu_GetWindowRect(hwnd%, r)\n    If (stClass$ = WU_WC_ACCESSFRMPOPUP) Then\n        f% = wu_GetWindowRect(hwndDesk%, rDesk)\n    Else\n        f% = wu_GetClientRect(hwndDesk%, rDesk)\n    End If\n    dx% = r.x2 - r.x1\n    dy% = r.y2 - r.y1\n    dxDesk% = rDesk.x2 - rDesk.x1\n    dyDesk% = rDesk.y2 - rDesk.y1\n    If (wu_StWindowClass(hwnd%) = WU_WC_ACCESSFRMPOPUP) Then\n        f% = wu_MoveWindow(hwnd%, rDesk.x1 + (dxDesk% - dx%) / 2, rDesk.y1 + (dyDesk% - dy%) / 2, dx%, dy%, True)\n    Else\n        f% = wu_MoveWindow(hwnd%, (dxDesk% - dx%) / 2, (dyDesk% - dy%) / 2, dx%, dy%, True)\n    End If\n    wu_CenterDoc = f%\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_ConvertTwipsToPixels\n'\n' PURPOSE     : Converts twips to pixels, calling Windows for\n'               the current device's Logical Pixels in the\n'               Horizontal or Vertical direction.\n'\n' ARGUMENTS   : nTwips%     - The number in twips (will be converted)\n'               nDirection% - 0=Horizontal, 1=Vertical.\n'------------------------------------------------------------------------\nFunction wu_ConvertTwipsToPixels (nTwips%, nDirection%) As Integer\n    Const nTwipsPerInch = 1440\n\n    hDC% = wu_GetDC(wu_GetAccessHwnd())\n    If (nDirection% = 0) Then       'Horizontal\n        nPixelsPerInch% = wu_GetDeviceCaps(hDC%, WU_LOGPIXELSX)\n    Else                            'Vertical\n        nPixelsPerInch% = wu_GetDeviceCaps(hDC%, WU_LOGPIXELSY)\n    End If\n    wu_ConvertTwipsToPixels = (nTwips% / nTwipsPerInch%) * nPixelsPerInch%\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_FIsDocument\n'\n' PURPOSE     : Determines whether the given window handle specifies a\n'               valid Access document.\n'------------------------------------------------------------------------\nFunction wu_FIsDocument (hwnd As Integer) As Integer\n    wu_FIsDocument = False\n    stClass$ = wu_StWindowClass(hwnd%)\n    If (stClass$ = WU_WC_ACCESSDBC) Then wu_FIsDocument = True\n    If (stClass$ = WU_WC_ACCESSTBL) Then wu_FIsDocument = True\n    If (stClass$ = WU_WC_ACCESSQRY) Then wu_FIsDocument = True\n    If (stClass$ = WU_WC_ACCESSFRM) Then wu_FIsDocument = True\n    If (stClass$ = WU_WC_ACCESSRPT) Then wu_FIsDocument = True\n    If (stClass$ = WU_WC_ACCESSMAC) Then wu_FIsDocument = True\n    If (stClass$ = WU_WC_ACCESSMOD) Then wu_FIsDocument = True\n    If (stClass$ = WU_WC_ACCESSFRMPOPUP) Then wu_FIsDocument = True\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_FMenuChecked\n'\n' PURPOSE     : Returns True if the specified menu item has a check\n'               mark next to it.\n'\n' ARGUMENTS   : iMenu% - The index of the drop down menu\n'               iItem% - The index of the item on the menu\n'\n'               Both of these arguments are zero based.\n'------------------------------------------------------------------------\nFunction wu_FMenuChecked (iMenu%, iItem%) As Integer\n    \n    ' If the current form is Zoomed, account for the system menu.\n\n    If (wu_IsZoomed(Screen.ActiveForm.hwnd)) Then\n        iMenu% = iMenu% + 1\n    End If\n\n    hMainMenu% = wu_GetMenu(wu_GetAccessHwnd())\n    hMenu% = wu_GetSubMenu(hMainMenu%, iMenu%)\n    fuFlags% = WU_MF_BYPOSITION Or WU_MF_CHECKED\n    wu_FMenuChecked = (wu_GetMenuState(hMenu%, iItem%, fuFlags%) <> 0)\n\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_FMenuEnabled\n'\n' PURPOSE     : Returns True if the specified menu item is enabled.\n'\n' ARGUMENTS   : iMenu% - The index of the drop down menu\n'               iItem% - The index of the item on the menu\n'\n'               Both of these arguments are zero based.\n'------------------------------------------------------------------------\nFunction wu_FMenuEnabled (iMenu%, iItem%) As Integer\n    \n    ' If the current form is Zoomed, account for the system menu.\n\n    If (wu_IsZoomed(Screen.ActiveForm.hwnd)) Then\n        iMenu% = iMenu% + 1\n    End If\n\n    hMainMenu% = wu_GetMenu(wu_GetAccessHwnd())\n    hMenu% = wu_GetSubMenu(hMainMenu%, iMenu%)\n    fuFlags% = WU_MF_BYPOSITION Or WU_MF_GRAYED\n    wu_FMenuEnabled = (wu_GetMenuState(hMenu%, iItem%, fuFlags%) = 0)\n\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_GetAccessHwnd()\n'\n' PURPOSE     : Returns a handle the the Access window.\n'------------------------------------------------------------------------\nFunction wu_GetAccessHwnd () As Integer\n    hwnd% = wu_GetActiveWindow()\n    While ((wu_StWindowClass(hwnd%) <> WU_WC_ACCESS) And (hwnd% <> 0))\n        hwnd% = wu_GetParent(hwnd%)\n    Wend\n    wu_GetAccessHwnd = hwnd%\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_GetCurrentDoc\n'\n' PURPOSE     : Retrieves the handle to the active Access document.\n'               If the fPopup flag is specified as TRUE, popup forms\n'               will be included.  If the fPopup flag is FALSE, Access\n'               will be activated first (a side effect).\n'------------------------------------------------------------------------\nFunction wu_GetCurrentDoc (fPopup%) As Integer\n    If (Not fPopup%) Then\n        hwnd% = wu_GetAccessHwnd()\n        If (hwnd% <> 0) Then hwnd% = wu_SetFocus(hwnd%)\n    End If\n    hwnd% = wu_GetFocus()\n    While (Not (wu_FIsDocument(hwnd%)) And (hwnd% <> 0))\n        hwnd% = wu_GetParent(hwnd%)\n    Wend\n    wu_GetCurrentDoc = hwnd%\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_GetMDIClientHwnd()\n'\n' PURPOSE     : Returns a handle the the Access MDIClient window.\n'------------------------------------------------------------------------\nFunction wu_GetMDIClientHwnd () As Integer\n    Dim hwnd As Integer\n    hwnd = wu_GetAccessHwnd()\n    hwnd = wu_GetWindow(hwnd, WU_GW_CHILD)\n    While ((wu_StWindowClass(hwnd) <> WU_WC_ACCESSMDICLIENT) And (hwnd <> 0))\n        hwnd = wu_GetWindow(hwnd, WU_GW_HWNDNEXT)\n    Wend\n    wu_GetMDIClientHwnd = hwnd\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_GetScreenSize\n'\n' PURPOSE     : Stores the screen size in r (a rectangle)\n'------------------------------------------------------------------------\nFunction wu_GetScreenSize (r As WU_RECT) As Integer\n    hwnd% = wu_GetDesktopWindow()\n    f% = wu_GetWindowRect(hwnd%, r)\n    wu_GetScreenSize = f%\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_GetToolbarHwnd\n'\n' PURPOSE     : Returns the handle of the toolbar if it is open.\n'------------------------------------------------------------------------\nFunction wu_GetToolbarHwnd () As Integer\n    hwnd% = wu_GetAccessHwnd()\n    hwnd% = wu_GetWindow(hwnd%, WU_GW_CHILD)\n    While ((wu_StWindowClass(hwnd%) <> WU_WC_ACCESSTOOLBAR) And (hwnd% <> 0))\n        hwnd% = wu_GetWindow(hwnd%, WU_GW_HWNDNEXT)\n    Wend\n    wu_GetToolbarHwnd = hwnd%\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_SetAccessSize\n'\n' PURPOSE     : Sizes the Access window to the specified coordinates.\n'               Coordinates should be given in pixels.\n'------------------------------------------------------------------------\nFunction wu_SetAccessSize (x%, y%, dx%, dy%) As Integer\n    hwnd% = wu_GetAccessHwnd()\n    If (wu_IsZoomed(hwnd%)) Then\n        f% = wu_ShowWindow(hwnd%, WU_SW_RESTORE)\n    End If\n    f% = wu_MoveWindow(hwnd%, x%, y%, dx%, dy%, True)\n    wu_SetAccessSize = f%\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_SetMenuChecked\n'\n' PURPOSE     : Sets the checkmark next to a menu item on or off.\n'\n' ARGUMENTS   : iMenu% - The index of the drop down menu\n'               iItem% - The index of the item on the menu\n'                           Both of these arguments are zero based.\n'               fChecked% - True to show the checkmark, false otherwise.\n'------------------------------------------------------------------------\nFunction wu_SetMenuChecked (iMenu%, iItem%, fChecked%) As Integer\n\n    ' If the current form is Zoomed, account for the system menu.\n\n    If (wu_IsZoomed(Screen.ActiveForm.hwnd)) Then\n        iMenu% = iMenu% + 1\n    End If\n\n    hMainMenu% = wu_GetMenu(wu_GetAccessHwnd())\n    hMenu% = wu_GetSubMenu(hMainMenu%, iMenu%)\n    If (fChecked%) Then\n        fuFlags% = WU_MF_BYPOSITION Or WU_MF_CHECKED\n    Else\n        fuFlags% = WU_MF_BYPOSITION Or WU_MF_UNCHECKED\n    End If\n    f% = wu_CheckMenuItem(hMenu%, iItem%, fuFlags%)\n    wu_DrawMenuBar wu_GetAccessHwnd()\n    wu_SetMenuChecked = f%\n\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_SetMenuEnabled\n'\n' PURPOSE     : Enables or disables a menu item.\n'\n' ARGUMENTS   : iMenu% - The index of the drop down menu\n'               iItem% - The index of the item on the menu\n'                           Both of these arguments are zero based.\n'               fEnabled% - True to show the checkmark, false otherwise.\n'------------------------------------------------------------------------\nFunction wu_SetMenuEnabled (iMenu%, iItem%, fEnabled%) As Integer\n    ' If the current form is Zoomed, account for the system menu.\n\n    If (wu_IsZoomed(Screen.ActiveForm.hwnd)) Then\n        iMenu% = iMenu% + 1\n    End If\n\n    hMainMenu% = wu_GetMenu(wu_GetAccessHwnd())\n    hMenu% = wu_GetSubMenu(hMainMenu%, iMenu%)\n    If (fEnabled%) Then\n        fuFlags% = WU_MF_BYPOSITION Or WU_MF_ENABLED\n    Else\n        fuFlags% = WU_MF_BYPOSITION Or WU_MF_GRAYED\n    End If\n    f% = wu_EnableMenuItem(hMenu%, iItem%, fuFlags%)\n    wu_DrawMenuBar wu_GetAccessHwnd()\n    wu_SetMenuEnabled = f%\n\nEnd Function\n\n'------------------------------------------------------------------------\n' FUNCTION    : wu_StWindowClass\n'\n' PURPOSE     : A simple cover function to the Windows API call.\n'------------------------------------------------------------------------\nFunction wu_StWindowClass (hwnd As Integer) As String\n    Const cchMax = 255\n    Dim stBuff As String * cchMax\n    cch% = wu_GetClassName(hwnd, stBuff, cchMax)\n    If (hwnd% = 0) Then\n        wu_StWindowClass = \"\"\n    Else\n        wu_StWindowClass = (Left$(stBuff, cch%))\n    End If\nEnd Function",
  "Tag": "kb-24999808"
}