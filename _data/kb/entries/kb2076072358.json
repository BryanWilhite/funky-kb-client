{
  "Document": {
    "DocumentId": 2076072358,
    "Title": "LINQ: “LINQ To Entities and Lazy Loading”; Include()",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2010-03-21T16:30:49",
    "ModificationDate": "2010-03-21T16:30:49",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "I've been playing with linq to entities also. It's got a long way to go before it catches up with linq to SQL. I've had to use linq to entities for the Table per Type Inheritance stuff. I found a good article recently which explains the whole 1 company 2 different ORM technologies thing here.\n\nHowever you can do lazy loading, in a way, by doing this:\n\n// Lazy Load Orders \nvar alice2 = data.Customers.First(c => c.Name == \"Alice\");\n\n// Should Load the Orders\nif (!alice2.Orders.IsLoaded)\n    alice2.Orders.Load();\n\nor you could just include the Orders in the original query:\n\n// Include Orders in original query\nvar alice = data.Customers.Include(\"Orders\").First(c => c.Name == \"Alice\");\n\n// Should already be loaded\nif (!alice.Orders.IsLoaded)\n    alice.Orders.Load();\n\n[http://stackoverflow.com/questions/338986/linq-to-entities-and-lazy-loading]",
  "Tag": "kb2076072358"
}