{
  "Document": {
    "DocumentId": 2076072246,
    "Title": "ASP.NET MVC: “Tip #30 – Create Custom Route Constraints”; NotEqual Constraint\n; Stephen Walther",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2009-09-15T18:02:38",
    "ModificationDate": "2009-09-15T18:02:38",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Creating a NotEqual Constraint\n\nThe easiest way to exclude one set of pages from matching a particular route is to take advantage of the custom route constraint in Listing 2.\n\nListing 2 – NotEqualConstraint.cs\n\n    using System;  \n    using System.Web;  \n    using System.Web.Routing;  \n\n    public class NotEqual : IRouteConstraint  \n    {  \n        private string _match = String.Empty;  \n\n        public NotEqual(string match)  \n        {  \n            _match = match;  \n        }  \n\n        public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)  \n        {  \n            return String.Compare(values[parameterName].ToString(), _match, true) != 0;  \n        }  \n    }  \nHere’s how you can use the NotEqual constraint to exclude the /Admin pages from the Default route:\n\n    routes.MapRoute(\n        \"Default\",\n        \"{controller}/{action}/{id}\",\n        new { controller = \"Home\", action = \"Index\", id = \"\" }, \n        new { controller = new NotEqual(\"Admin\") }\n    );\n\nThis route won’t match any request when the controller parameter gets the value Admin. For example, this route won’t match the URLs /Admin/DeleteAll or /Admin/Index.\n\n[http://stephenwalther.com/blog/archive/\n    2008/08/07/asp-net-mvc-tip-30-create-custom-route-constraints.aspx]",
  "Tag": "kb2076072246"
}