{
  "Document": {
    "DocumentId": 900911580,
    "Title": "\"Stupid\" Mod Operator Tricks",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2000-01-10T21:20:01",
    "ModificationDate": "2000-01-10T21:20:01",
    "TemplateId": null,
    "SegmentId": 76,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Mod in Ordinal Extractions\n\nIn the same manner that sub-strings can be extracted from strings with the Left() function, the Mod operator can be used to extract digits from integer values:\n\n    (19984 - (19984 Mod 10))/10 = 1998\n\nThe Mod operator used like the Right() function:\n\n    19984 Mod 10 = 4\n\nThanks to the Mod operator, more traditional scalar operators can be used in concatenation-like operations:\n\n    1998 * 10 + 4 = 19984\n\n\nMod in Boolean Evaluations\n\nTest for an odd number with Long lngTest against the Boolean blnTest:\n\n    blnTest = (lngTest Mod 2 = 1)\n\nTest for an even number with Long lngTest against the Boolean blnTest:\n\n    blnTest = (lngTest Mod 2 = 0)\n\nTest for a multiple of six with Long lngTest against the Boolean blnTest:\n\n    blnTest = (lngTest Mod 6 = 0)\n\nIMPORTANT: Recall that Mod operations return the remainder in integer division. When the Long variable (lngTest) becomes involved in a Mod operation, it makes explicit the use of integers. Without lngTest, there is implicit rounding. For example:\n\n    (13.4 Mod 2 = 13 Mod 2) = True\n\nand\n\n    (13.5 Mod 2 = 14 Mod 2) = True",
  "Tag": "kb900911580"
}