{
  "Document": {
    "DocumentId": 2076072312,
    "Title": "“When to use RenderAction vs RenderPartial with ASP.NET MVC”",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2009-10-14T19:21:40",
    "ModificationDate": "2009-10-14T19:21:40",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "At first glance, RenderAction and RenderPartial both do a very similar thing – they load ‘some other content’ into the view being rendered at the place they are called. Personally, I think they should be used for different scenarios so these are my thoughts on where each one should be used and why.\n\nFirst though, a quick recap on what they do:\n\n    * RenderPartial renders a control with some model passed to it.\n    * RenderAction (or RenderSubAction which addresses some issues) calls a controller action and then renders whatever view that returns with whatever model that controller action passes through it.\n\nHmmn, they sound pretty similar don’t they! The thing to note though is that the model passed to RenderPartial is either the current model being rendered by the calling view or a subset of it. Anything that a RenderPartial view being called is going to need has to be passed into the Model of the calling view. The view rendered using RenderAction on the other hand could contain a completely different model with no need for this to be passed in to our parent view.\n\nBecause of this, I think RenderPartial is most appropriate when what it is going to output could be considered part of the calling view but separating it out into a user control makes sense to allow re-use and avoid repeating the same rendering code in multiple views.\n\n…\n\nSo that is where and how I think RenderPartial should be used. How about RenderAction?\n\nWell, I think this has it’s place when the thing that needs to be rendered isn’t the responsibility of the calling view or controller.\n\nFor example, I may have a PersonController responsible for CRUD operations on the Person class including a Display action and view but I do not want either of these to have any responsibility for anything to do with the display of Projects that the person is working on. If I want to display a list of assigned projects within the Person Display view then I would use RenderAction to add it but the responsibility and knowledge of how to do this resides with the ProjectController and it’s views.\n\n[http://blogs.intesoft.net/post/2009/02/\n    renderaction-versus-renderpartial-aspnet-mvc.aspx]",
  "Tag": "kb2076072312"
}