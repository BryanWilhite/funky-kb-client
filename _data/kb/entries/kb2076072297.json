{
  "Document": {
    "DocumentId": 2076072297,
    "Title": "\n“Sorting Lists using IComparable and IComparer Interface in .NET”",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2009-10-06T09:01:11",
    "ModificationDate": "2009-10-06T09:01:11",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "It's easy to sort a list of strings or integers by just calling the List.Sort() method, but how can we sort two objects and based on what field?\n\n…\n\nLet's implement IComparable<> interface to our Employee class:\n\nclass Employee : IComparable<Employee>\n{\n     public string Name { get; set; }\n     public int Salary { get; set; }\n        \n     #region IComparable<Employee> Members\n       \n     public int CompareTo( Employee other )\n     {\n         if ( this.Salary < other.Salary ) return 1;\n         else if ( this.Salary > other.Salary ) return -1;\n         else return 0;\n     }\n        \n     #endregion\n}\n\nIn the above code, we are sorting objects based on salary of employee in descending order, by implementing CompareTo() method of IComparable interface which takes Employee reference as a parameter.\nNow, calling empList.Sort() gives no exception and empList is well sorted by salary.\n\nBut sometimes, we may need to sort a list of objects when class does not implement IComparable<> interface and also we may need various kinds of sorting on that class like:\n\n   1. Sort Employees by Salary in Ascending Order\n   2. Sort Employees by Salary in Descending Order\n   3. Sort Employees by Name\n\nTo solve this problem, .NET provides a special interface called IComparer<> which has a method Compare(), takes two object parameters X, Y and returns an int.\nUse of IComparer<> interface tells List how exactly you want to sort.\n\nclass Employee_SortBySalaryByAscendingOrder : IComparer<Employee>\n{\n    #region IComparer<Employee> Members\n    \n    public int Compare( Employee x, Employee y )\n    {\n        if ( x.Salary > y.Salary ) return 1;\n        else if ( x.Salary < y.Salary ) return -1;\n        else return 0;\n    }\n    \n    #endregion\n}\n\nclass Employee_SortBySalaryByDescendingOrder : IComparer<Employee>\n{\n    #region IComparer<Employee> Members\n    \n    public int Compare( Employee x, Employee y )\n    {\n        if ( x.Salary < y.Salary ) return 1;\n        else if ( x.Salary > y.Salary ) return -1;\n        else return 0;\n    }\n    \n    #endregion\n}\n\nclass Employee_SortByName : IComparer<Employee>\n{\n    #region IComparer<Employee> Members\n    \n    public int Compare( Employee x, Employee y )\n    {\n        return string.Compare( x.Name, y.Name );\n    }\n    \n    #endregion\n}\n\nThe above code introduces three classes by implementing Compare() method of IComparer interface.\n\nNow, how do we use this? We just have to pass the reference of these classes as a object parameter to Sort() method as shown below:\n\n// Use Collection Initializers( C# 3.0 ) to initialize the List \nList<Employee> empList = new List<Employee>() \n\t\t{ new Employee { Name = \"a\", Salary = 14000 },\n                    new Employee { Name = \"b\", Salary = 13000 } \n                  };\n                                     \nEmployee_SortBySalaryByAscendingOrder eAsc = \n\t\tnew Employee_SortBySalaryByAscendingOrder(); \n// Sort Employees by salary by ascending order.   \nempList.Sort( eAsc );\n    \nEmployee_SortBySalaryByDescendingOrder eDsc = \n\t\tnew Employee_SortBySalaryByDescendingOrder();\n// Sort Employees by salary by descending order. \nempList.Sort( eDsc );\n    \nEmployee_SortByName eName = new Employee_SortByName();\n// Sort Employees by their names.                                 \nempList.Sort( eName );\n\nConclusion\n\nSorting Lists is simple as long as you sort basic elements like strings and integers for which comparison classes are defined.\n\nUsage of IComparable<> and IComparer<> interface helps to sort Lists of objects on custom classes easily.\n\n[http://www.codeproject.com/KB/cs/Sorting_Lists.aspx?display=Print]",
  "Tag": "kb2076072297"
}