{
  "Document": {
    "DocumentId": 2076071889,
    "Title": "Flippant Remarks about Delegates in C# 2.0",
    "DocumentShortName": null,
    "FileName": null,
    "Path": null,
    "CreateDate": "2007-10-01T15:32:13",
    "ModificationDate": "2007-10-01T15:32:13",
    "TemplateId": null,
    "SegmentId": 83,
    "IsRoot": false,
    "IsActive": true,
    "SortOrdinal": null,
    "ClientId": null,
    "Tag": null
  },
  "Content": "Jeffrey Richter in “Working with Delegates Made Easier with C# 2.0” makes it plain: “Unfortunately, delegates are difficult for many developers to understand and use because delegates require special coordination between your programming language compiler and the CLR.” This “syntactic sugar” discussion is in this document:\n\n    http://www.codeguru.com/Csharp/Csharp/cs_delegates/article.php/c4767\n\nThis article introduces the ThreadPool.QueueUserWorkItem() Method, documented here:\n\n    http://msdn2.microsoft.com/en-us/library/\n        system.threading.threadpool.queueuserworkitem.aspx\n\nWith the above digested it may then be possible to understand the author motives behind “How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide)” here:\n\n    http://msdn2.microsoft.com/en-us/library/ms173176(VS.80).aspx\n\nHowever, the first question posed in Steven Toub’s June 2006 article “Parameterized ThreadStart, EventWaitHandle, and More” explicitly uses the term “delegate inference,” which helps to make the aforementioned article just a little bit more summarizing and contextually coherent. The Steven Toub article is here:\n\n    http://msdn.microsoft.com/msdnmag/issues/06/06/NETMatters/\n\nNone of the above discuss the ThreadStart Delegate, documented here:\n\n    http://msdn2.microsoft.com/en-us/library/\n        system.threading.threadstart.aspx\n\nThe ThreadStart Delegate is ‘old’ and may not be in favor because of performance/scalability issues related to a “dedicated thread.” According to Gary J. Kuehn in “Threading paradigms available under the .NET CLR, using C#” he maintains that, “Empirical Analysis of thread CPU usage reveals that operations under the thread pool are more efficient. Processor utilization never reaches 100% while under thread pool control.” This article, as of this writing, is here:\n\n    http://www.codeproject.com/cs/threads/managedthreadcs-projects.asp\n\n\n",
  "Tag": "kb2076071889"
}